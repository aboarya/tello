
.. _program_listing_file_inc_tello_command_socket.hpp:

Program Listing for File command_socket.hpp
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_inc_tello_command_socket.hpp>` (``inc/tello/command_socket.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef COMMANDSOCKET_HPP
   #define COMMANDSOCKET_HPP
   
   #include <chrono>
   #include <condition_variable>
   #include <deque>
   #include <mutex>
   #include <thread>
   
   #include "joystick/joystick.hpp"
   #include "tello/base_socket.hpp"
   
   class CommandSocket : public BaseSocket {
   public:
     CommandSocket(asio::io_service &io_service, const std::string &drone_ip,
                   const std::string &drone_port, const std::string &local_port,
                   int n_retries_allowed = 1, int timeout = 7);
   
     void executeQueue();
   
     void addCommandToQueue(const std::string &cmd);
   
     void addCommandToFrontOfQueue(const std::string &cmd);
   
     void clearQueue();
   
     void stopQueueExecution();
   
     void removeNextFromQueue();
   
     void doNotAutoLand();
   
     void allowAutoLand();
   
     void emergency();
   
     void stop();
   
     bool isExecutingQueue() const;
   
     void land();
   
     ~CommandSocket();
   
     void prepareToExit();
   
     void sendCommand(const std::string &cmd);
   
     bool dnal() const;
   
   private:
     void handleResponseFromDrone(const std::error_code &error,
                                  size_t bytes_recvd) override;
     void handleSendCommand(const std::error_code &error, size_t bytes_sent,
                            std::string cmd) override;
   
     void waitForResponse();
     void sendQueueCommands();
     void doNotAutoLandWorker();
     bool shouldWaitForResponse(const std::string& cmd);
   
     enum { max_length_ = 1024 };
     bool waiting_for_response_ = false, execute_queue_ = false, dnal_ = false,
          on_ = true;
     // on_ needs to be differnbet from tello's run_ as on exit we need to call stop and land before killing the command thread
     char data_[max_length_]{};
     int timeout_, n_retries_ = 0, n_retries_allowed_ = 0;
     std::string last_command_, response_;
     std::deque<std::string> command_queue_;
     std::mutex queue_mutex_, execute_queue_mutex_, dnal_mutex_;
     std::condition_variable cv_execute_queue_, cv_dnal_;
     std::chrono::system_clock::time_point command_sent_time_;
     std::thread cmd_thread, dnal_thread;
   };
   
   #endif // COMMANDSOCKET_HPP
